import cv2
import numpy as np

# Open the camera
cap = cv2.VideoCapture(0)

while True:
    # Capture a frame from the camera
    ret, frame = cap.read()

    # Convert the captured image to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Define the ranges of colors to be detected (in BGR format)
    white_lower = (200, 200, 200)
    white_upper = (255, 255, 255)
    orange_lower = (0, 100, 200)
    orange_upper = (80, 200, 235)
    red_lower = (0, 100, 200)
    red_upper = (80, 200, 235)

    # Create masks for the white and orange colors
    white_mask = cv2.inRange(frame, white_lower, white_upper)
    orange_mask = cv2.inRange(frame, orange_lower, orange_upper)
    red_mask = cv2.inRange(frame, red_lower, red_upper)

    # Combine the masks using the bitwise OR operator
    combined_mask = white_mask | orange_mask | red_mask

    # Apply some morphological operations to remove noise and fill gaps
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    combined_mask = cv2.erode(combined_mask, kernel, iterations=2)
    combined_mask = cv2.dilate(combined_mask, kernel, iterations=2)

    # Find contours in the thresholded image
    contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter out any contours that are too small to be table tennis balls
    MIN_AREA = 50
    contours = [c for c in contours if cv2.contourArea(c) > MIN_AREA]

    # Draw the detected contours on the original image
    for c in contours:
        x, y, w, h = cv2.boundingRect(c)
        if np.any(combined_mask[y:y+h,x:x+w]):
            if np.any(white_mask[y:y+h,x:x+w]):
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            else:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)

    # Show the original image with the detected contours
    cv2.imshow("Frame", frame)

    # Exit the loop if the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera
cap.release()
cv2.destroyAllWindows()
